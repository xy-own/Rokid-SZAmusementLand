/*
* 文件名：AutoFindScriptGenerator.cs
* 作者：依旧
* 版本：#VERSION#
* Unity版本：2021.3.26f1
* 创建日期：2024/11/19 10:17:55
* 版权：© 2024 杭州西雨动画有限公司
* All rights reserved.
*/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
namespace HQG
{
    /// <summary>
    /// 类：AutoFindScriptGenerator
    /// 描述：此类的功能和用途...
    /// </summary>
    public class AutoFindScriptGenerator : MonoBehaviour
    {
        [MenuItem("GameObject/生成查找脚本", false, 10)]
        private static void GenerateScriptFromSelected()
        {
            GameObject selectedObject = Selection.activeGameObject;
            if (selectedObject == null)
            {
                EditorUtility.DisplayDialog("错误", "请先选中一个物体！", "确定");
                return;
            }

            string defaultScriptName = $"{selectedObject.name}_AutoGeneratedScript";
            string scriptName = EditorUtility.SaveFilePanel("保存生成的脚本", Application.dataPath, defaultScriptName, "cs");

            if (string.IsNullOrEmpty(scriptName))
            {
                return; // 用户取消保存
            }

            GenerateScript(selectedObject, scriptName);
            AssetDatabase.Refresh();
            EditorUtility.DisplayDialog("成功", "脚本生成成功！", "确定");
        }

        private static void GenerateScript(GameObject targetObject, string scriptPath)
        {
            StringBuilder scriptBuilder = new StringBuilder();

            string className = Path.GetFileNameWithoutExtension(scriptPath);

            scriptBuilder.AppendLine("using UnityEngine;");
            scriptBuilder.AppendLine();
            scriptBuilder.AppendLine($"public class {className} : MonoBehaviour");
            scriptBuilder.AppendLine("{");

            AppendFindMethods(scriptBuilder, targetObject.transform, "");

            scriptBuilder.AppendLine("    private void Awake()");
            scriptBuilder.AppendLine("    {");

            AppendInitialization(scriptBuilder, targetObject.transform, "");

            scriptBuilder.AppendLine("    }");
            scriptBuilder.AppendLine("}");

            File.WriteAllText(scriptPath, scriptBuilder.ToString());
        }

        private static void AppendFindMethods(StringBuilder builder, Transform parent, string parentPath)
        {
            foreach (Transform child in parent)
            {
                string childPath = string.IsNullOrEmpty(parentPath) ? child.name : $"{parentPath}/{child.name}";
                builder.AppendLine($"    private Transform {child.name};");
                AppendFindMethods(builder, child, childPath);
            }
        }

        private static void AppendInitialization(StringBuilder builder, Transform parent, string parentPath)
        {
            foreach (Transform child in parent)
            {
                string childPath = string.IsNullOrEmpty(parentPath) ? child.name : $"{parentPath}/{child.name}";
                builder.AppendLine($"        {child.name} = transform.Find(\"{childPath}\");");
                AppendInitialization(builder, child, childPath);
            }
        }
    }

}